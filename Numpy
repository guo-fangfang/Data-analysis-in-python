#numpy ndarray 对象
#######################单一维度
import numpy as np
a = np.array([1,2,3])
print(a)
type(a)
########################多维度
import numpy as np
a = np.array([[1,2],[3,4]])
print(a)
###########################规定内部参数类型
import numpy as np
a = np.array([1,2,3],dtype = complex)
print(a)
######################创建结构化数据类型（类型模板）可实现一次性定义内部数据类型
import numpy as np
dt = np.dtype(np.int32)
print(dt)

dt = np.dtype("i4")
print(dt)

dt = np.dtype("<i4")

#such as 
dt = np.dtype([("age",np.int8)])#构建结构化数据类型
print(dt)

dt = np.dtype([("age",np.int8)])
a = np.array([(10,),(20,),(30,)],dtype = dt)#将数据类型应用到该对象
print(a)
print(a["age"])

student = np.dtype([('name','S20'),('age','i1'),('marks','f4')])
print(student)
a = np.array([("abc",21,50),("xyz",18,75)],dtype = student)
print(a)
########################数组属性
import numpy as np #ndim
a = np.arange(24)
print (a)
print(a.ndim)
b = a.reshape(2,4,3)
print(b)
print(b.ndim)

a = np.array([[1,2,3],[4,5,6]])#shape
print(a.shape)

b = a.reshape(3,2)#reshape

x = np.array([1,2,3,4,5],dtype = np.int8)
print(x.itemsize)
y = np.array([1,2,3,4,5],dtype = np.float64)
print(y.itemsize)

x  = np.array([1,2,3,4,5])#flags
print(x.flags)

#######################创建数组
#创建空数组
import numpy as np 
x = np.empty([3,2],dtype = np.int8)
#创建0数组
x = np.zeros(5)
y = np.zeros(5,dtype=np.int8)
z = np.zeros([2,2],dtype = [("x","i4"),("y",'f4')])
print((x,y,z))
#创建1数组
x = np.ones(5)
x = np.ones([2,2],dtype = int32)
#######################从已有的数组创建数组
x = [1,2,3]
y = (1,2,3)
z = [(1,2,3),(4,5)]
a = np.asarray(x)
b = np.asarray(y)
c = np.asarray(z)#asarray

s = b"Heelo"
a = np.frombuffer(s,dtype='S1')#动态数组

list = range(5)
it = iter(list)
x = np.fromiter(it,dtype = int)
print(x)

#############################从数值范围创建数组
x = np.arange(5,dtype= float)
x = np.linspace(1,20,10)#等差数列
x_ = np.linspace(1,20,10).reshape([2,5])#等差数列
y = np.logspace(1,2,num=10)
y_ = np.logspace(0,9,base=2)

#################################切片和索引
#切片索引既可以使用分号也可以使用冒号
a = np.arange(10)
s = slice(0,5,2)
print(a[s])
s_ = a[0:5:2]
print(s_)

a = np.array([[1,2,3],[4,5,6],[7,8,9]])
print(a)
print(a[1:])
print(a[1:,])
##########################高级索引
#整数数组索引即获取指定位置的元素
x = np.array([[1,2],[3,4],[5,6]])
y1 = x[[0],[0]]
y1_ = x[0,0]
print(y1)
print("\n")
print(y1_)
y2 = x[[1],[1]]
y3 = x[[2],[0]]
print(y2,"\n",y3)#一次获取一个
y = x[[0,1,2],[0,1,0]]
print(y)#一次获取多个不同位置上的值

x = np.array([[0,1,2],[3,4,5],[6,7,8],[9,10,11]])#获取四个顶点值(0,0),(0,2),(3,0),(3,2)
#method one 
y = x[[0,0,3,3],[0,2,0,2]]
print(y)
#method two
rows = np.array([[0,0],[3,3]])
cols = np.array([[0,2],[0,2]])
y = x[rows,cols]
print(y)
#用：和...通常用在获取连续值,注意使用:的时候不取尾值
b = x[1:3,1:2]
b_ = x[1:4,1:3]
c = x[1:3,[1,2]]
d = x[...,1:]
################################布尔索引
#example 1
print(x[x>5])
#example 2
a = np.array([np.nan,1,2,np.nan,3,4,5])
print(a[~np.isnan(a)])#~相当于非！
print(a[np.isnan(a)])
#example 3
a =np.array([1,2+6j,5,3.5+5j])
print(a[np.iscomplex(a)])
#注意使用np.ix_,与之前使用整数数组同事获取多个不同位置上的值区别
x=np.arange(32).reshape((8,4))
print (x[np.ix_([1,5,7,2],[0,3,1,2])])#同时获取了这些行的数据而不是点数据
##############################广播/Broadcast，实现不同shape的数组运算
#example 1 相同shape数组的计算
a = np.array([1,2,3,4])
b = np.array([10,20,30,40])
c = a*b
print(c)#对应位置元素相乘
# example 2 不同shape 数组的计算触发Broadcast机制
a = np.array([[0,0,0],[10,10,10],[20,20,20],[30,30,30]])
b = np.array([1,2,3])
print(a+b)
print(a*b)#一维在高维上广播
################################迭代数组
#np.nditer()简化循环流程访问数据
a = np.arange(6).reshape(2,3)
for x in np.nditer(a):
	print(x,end = ",")

#example 2
a  = np.arange(0,60,5).reshape(3,4)
for x  in np.nditer(a,flags = ["external_loop"],order = "F"):#external_loop 通常和F顺序结合一起用
	print(x,end = ",")
#修改数组中元素
a = np.arange(0,60,5)
a = a.reshape(3,4)
for x in np.nditer(a,op_flags=["readwrite"]):
x[...,] = 2*x#按照行访问
print(a)
#广播迭代输出
a = np.arange(0,60,5)
a = a.reshape(3,4)
b = np.array([1,2,3,4],dtype = int)
for x,y in np.nditer([a,b]):
	print("%d:%d" % (x,y),end = ",")
