#numpy ndarray 对象
#######################单一维度
import numpy as np
a = np.array([1,2,3])
print(a)
type(a)
########################多维度
import numpy as np
a = np.array([[1,2],[3,4]])
print(a)
###########################规定内部参数类型
import numpy as np
a = np.array([1,2,3],dtype = complex)
print(a)
######################创建结构化数据类型（类型模板）可实现一次性定义内部数据类型
import numpy as np
dt = np.dtype(np.int32)
print(dt)

dt = np.dtype("i4")
print(dt)

dt = np.dtype("<i4")

#such as 
dt = np.dtype([("age",np.int8)])#构建结构化数据类型
print(dt)

dt = np.dtype([("age",np.int8)])
a = np.array([(10,),(20,),(30,)],dtype = dt)#将数据类型应用到该对象
print(a)
print(a["age"])

student = np.dtype([('name','S20'),('age','i1'),('marks','f4')])
print(student)
a = np.array([("abc",21,50),("xyz",18,75)],dtype = student)
print(a)
########################数组属性
import numpy as np #ndim
a = np.arange(24)
print (a)
print(a.ndim)
b = a.reshape(2,4,3)
print(b)
print(b.ndim)

a = np.array([[1,2,3],[4,5,6]])#shape
print(a.shape)

b = a.reshape(3,2)#reshape

x = np.array([1,2,3,4,5],dtype = np.int8)
print(x.itemsize)
y = np.array([1,2,3,4,5],dtype = np.float64)
print(y.itemsize)

x  = np.array([1,2,3,4,5])#flags
print(x.flags)

#######################创建数组
#创建空数组
import numpy as np 
x = np.empty([3,2],dtype = np.int8)
#创建0数组
x = np.zeros(5)
y = np.zeros(5,dtype=np.int8)
z = np.zeros([2,2],dtype = [("x","i4"),("y",'f4')])
print((x,y,z))
#创建1数组
x = np.ones(5)
x = np.ones([2,2],dtype = int32)
#######################从已有的数组创建数组
x = [1,2,3]
y = (1,2,3)
z = [(1,2,3),(4,5)]
a = np.asarray(x)
b = np.asarray(y)
c = np.asarray(z)#asarray

s = b"Heelo"
a = np.frombuffer(s,dtype='S1')#动态数组

list = range(5)
it = iter(list)
x = np.fromiter(it,dtype = int)
print(x)

#############################从数值范围创建数组
x = np.arange(5,dtype= float)
x = np.linspace(1,20,10)#等差数列
x_ = np.linspace(1,20,10).reshape([2,5])#等差数列
y = np.logspace(1,2,num=10)
y_ = np.logspace(0,9,base=2)

#################################切片和索引
#切片索引既可以使用分号也可以使用冒号
a = np.arange(10)
s = slice(0,5,2)
print(a[s])
s_ = a[0:5:2]
print(s_)

a = np.array([[1,2,3],[4,5,6],[7,8,9]])
print(a)
print(a[1:])
print(a[1:,])
##########################高级索引
#整数数组索引即获取指定位置的元素
x = np.array([[1,2],[3,4],[5,6]])
y1 = x[[0],[0]]
y1_ = x[0,0]
print(y1)
print("\n")
print(y1_)
y2 = x[[1],[1]]
y3 = x[[2],[0]]
print(y2,"\n",y3)#一次获取一个
y = x[[0,1,2],[0,1,0]]
print(y)#一次获取多个不同位置上的值

x = np.array([[0,1,2],[3,4,5],[6,7,8],[9,10,11]])#获取四个顶点值(0,0),(0,2),(3,0),(3,2)
#method one 
y = x[[0,0,3,3],[0,2,0,2]]
print(y)
#method two
rows = np.array([[0,0],[3,3]])
cols = np.array([[0,2],[0,2]])
y = x[rows,cols]
print(y)
#用：和...通常用在获取连续值,注意使用:的时候不取尾值
b = x[1:3,1:2]
b_ = x[1:4,1:3]
c = x[1:3,[1,2]]
d = x[...,1:]
################################布尔索引
#example 1
print(x[x>5])
#example 2
a = np.array([np.nan,1,2,np.nan,3,4,5])
print(a[~np.isnan(a)])#~相当于非！
print(a[np.isnan(a)])
#example 3
a =np.array([1,2+6j,5,3.5+5j])
print(a[np.iscomplex(a)])
#注意使用np.ix_,与之前使用整数数组同事获取多个不同位置上的值区别
x=np.arange(32).reshape((8,4))
print (x[np.ix_([1,5,7,2],[0,3,1,2])])#同时获取了这些行的数据而不是点数据
##############################广播/Broadcast，实现不同shape的数组运算
#example 1 相同shape数组的计算
a = np.array([1,2,3,4])
b = np.array([10,20,30,40])
c = a*b
print(c)#对应位置元素相乘
# example 2 不同shape 数组的计算触发Broadcast机制
a = np.array([[0,0,0],[10,10,10],[20,20,20],[30,30,30]])
b = np.array([1,2,3])
print(a+b)
print(a*b)#一维在高维上广播
################################迭代数组
#np.nditer()简化循环流程访问数据
a = np.arange(6).reshape(2,3)
for x in np.nditer(a):
	print(x,end = ",")

#example 2
a  = np.arange(0,60,5).reshape(3,4)
for x  in np.nditer(a,flags = ["external_loop"],order = "F"):#external_loop 通常和F顺序结合一起用
	print(x,end = ",")
#修改数组中元素
a = np.arange(0,60,5)
a = a.reshape(3,4)
for x in np.nditer(a,op_flags=["readwrite"]):
x[...,] = 2*x#按照行访问
print(a)
#广播迭代输出
a = np.arange(0,60,5)
a = a.reshape(3,4)
b = np.array([1,2,3,4],dtype = int)
for x,y in np.nditer([a,b]):
	print("%d:%d" % (x,y),end = ",")

###############################对数组的操作
'''
1.修改数组形状
2.翻转数组
3.修改数组维度
4.连接数组
5.分割数组
6.数组元素的添加和删除
'''
#将Ndarray按行处理访问改成按元素一个个访问
a = np.arange(9).reshape(3,3)
print(a)
for x  in a :
	print(x,"\n")#按照行访问，只针对ndarray数据

for element in a.flat:
	print(element)
#拷贝一份数据,flatten(),拷贝数据改变，原数据不改变
a = np.arange(8).reshape(2,4)
b = a.flatten()
c = a.flatten(order="F")
print(a,"\n")
print(b,"\n")
print(c)
	
#ravel()，修改后会改变原数组的值
 a = np.arange(8).reshape(2,4)
 b = a.ravel()
 c = a.ravel(order = "F")
 print(a,"\n")
 print(b,"\n")
 print(c)
 b[1]=100
 print(a,"\n")#a的值已经改变
 print(b)
#################翻转数组
#兑换数组维度transpose()
a = np,arange(12).reshape(3,4)
b = np.transpose(a)
#转置
c = a.T
#按轴滚动,轴1为高度，轴2为宽度，轴0 为深度
a = np.arange(8).reshape(2,2,2)
b = np.rollaxis(a,2,0)#轴2滚动到轴0
#交换轴，np.swapaxes()
#######################修改数组维度
"""
broadcast():
broadcast_to()
expand_dims()
squeeze()
"""
#broadcast_to
a = np.arange(4).reshape(1,4)
b = np.broadcast_to(a,(4,4))#实现自我复制成4*4shape 的数组
#expand_dims(arr,axis)
x = np.array([[1,2],[3,4]])
y = np.expand_dims(x,axis = 0)
print(y,'\n')
print(x.shape,y.shape)
y1 = np.expand_dims(x,axis = 1)
print(x.shape,y1.shape)#(0,1,2)轴的顺序
#squeeze(arr,axis)只能用于删除一维所在条目
x = np.arange(9).reshape(3,3,1)
y = np.squeeze(x)
y1 = np.squeeze(x,2)
print(y,"\n",y1)
####################################连接数组
'''
np.concatenate((a1,a2,a3....),axis)axis = 0/1/2....
np.stack()
np.hstack()
np.vstack()
'''
#example 1----np.concatenate,只能用于数组shape相同的情况，新的数组维度和原数组保持一致
a = np.array([[1,2],[3,4]])
b = np.array([[5,6],[7,8]])
c1 = np.concatenate((a,b),axis=0)
c2 = np.concatenate((a,b),axis=1)
print(c1,"\n",c2)

x = np.arange(27).reshape(3,3,3)
y = np.arange(28,55).reshape(3,3,3)
z1 = np.concatenate((x,y),axis=0)
z2 = np.concatenate((x,y),axis=1)
z3 = np.concatenate((x,y),axis=2)
print(x,"\n")
print(y,"\n")
print(z1,"\n"**2,z2,"\n"**2,z3)
#example 2 -----np.stack(arr,axis)用于沿新轴堆叠，会导致新的数组维度+1
z1 = np.stack((a,b),axis = 0)#沿着0轴堆叠，维度+1
z2 = np.stack((a,b),axis = 1)
print(z1)
print(z1.shape)
print(z2)
print(z2.shape)
#example 3&4--------hstack()andvstack() 属于stack的变种
#example3 hstack  沿水平方向堆叠
d1 = np.hstack((a,b))
#example4 vstack 沿竖直方向堆叠
d2 = np.vstack((a,b))
###########################数组的分割
'''
split()
hsplit():从水平方向上按列分割
vsplit()：从竖直方向上按行分割
'''
# example 1----split(arr,indices_or_sections,axis)
#axis = 0,等价于水平切分（按列方向），axis =竖直方向切分
a = np.arange(9)
b1 = np.split(a,3)#用3平均切分
b2 = np.split(a,[4,7])#用数组所在位置切分，左开右闭

a = np.arange(16).reshape(4,4)
c1 = np.split(a,2,axis = 0)
c1_ = np.vsplit(a,2)#axis=vsplit
c2 = np.split(a,2,axis = 1)
c2_ = np.hsplit(a,2)
print(a)
print("************")
print(c1)
print("************")
print(c1_)
print("************")
print(c2)
print("************")
print(c2_)

########################数组元素的添加与删除
'''
resize()
append()
insert()
delete()
unique()
'''
#np.resiez(arr,shape),append()函数只能沿着轴添加元素
#np.append(arr,value,axis)axis=0/1/none;当为None时则返回一维数组
a = np.array([[1,2,3],[4,5,6]])
print(a)
print("向数组中添加元素，且没有指定要添加的axis")
b = np.append(a,[7,8,9])
print(b,"\n")
print("沿着0轴添加元素")
b1 = np.append(a,[[7,8,9]],axis = 0)
print(b1,"\n")
print("沿着1轴添加元素")
b2 = np.append(a,[[5,5,5],[7,8,9]],axis = 1)
print(b2)
#append函数虽然能够插入但是只能顺序插入，想要随意插入得用insert函数
#np.insert(arr,obj,values,axis),obj表示要插入的位置，
a = np.array([[1,2],[3,4],[5,6]])
print("原数组：",a)
b = np.insert(a,3,[11,12])
print(b)
b1 = np.insert(a,1,[11,12],axis = 0)
b2 = np.insert(a,1,[11,12,13],axis = 1)
print("b1:",b1,"\n","b2:",b2)#如果插入数值不够就会沿着轴广播

#np.delete(arr,obj,axis),沿着指定轴删除指定位置的值
a = np.arange(12).reshape(3,4)
print("****原始数值****")
print("未传递参数")
b1 = np.delete(a,5)#删除5号位置的值
print("b1:")
print(b1)
print("按照列方向删除")
b2  = np.delete(a,2,axis=1)#删除第二列的值
print(b2)
print("按照行方向删除")
b3 = np.delete(a,2,axis = 0)#删除第二行的值
print(b3)
print("使用切片")
a = np.array([1,2,3,4,5,6,7,8,9,10])
b4 = np.delete(a,np.s_[::2])
print(b4)
b5 = np.delete(a,np.s_[::3])
print("b5:",b5)
#np.unique(arr,return_index,return_inverse,return_counts)
'''
return_index:返回新列表旧坐标
return_inverse:返回旧列表新坐标
return_counts:返回频数
'''
a = np.array([1,1,2,2,3,4,5,6,6,6,7,8,9,9,9,9])
print("原数组：")
print(a)
print("去重后的数组")
print(np.unique(a))
print("返回新列表的旧坐标")
b,indexs = (np.unique(a,return_index=T))
print("b:",b)
print(indexs)
print("返回旧元素新坐标")
b1,indexs_1=(np.unique(a,return_inverse=T))
print("b1:",b1)
print(indexs_1)
print("返回频数")
b2,counts = np.unique(a,return_counts=T)
print(counts)
##################################位运算
#example 1 ,&:二进制同为1才为1，否则为0
import numpy as np
print("13和17的二进制形式")
a,b = 13,17
print(bin(a),bin(b))
print("\n")
print("13和17的位与：")
print(np.bitwise_and(13,17))
#example 2 ,| 参与运算的二进制只要有一个为1，结果为1
print(np.bitwise_or(13,17))
#example 3 ,^:参与运算的两个对应位不同则为1
print(a^b)
#example 4----invert(),二进制中0->1,1->0
print(np.invert(np.array([13],dtype = np.uint8)))
print(bin(13))
print(bin(242))
#left_shift()/np.right_shift
print(np.left_shift(10,2))#将10左移两个位置
print(np.binary_repr(10,width=8))
print(np.binary_repr(40,width=8))
################################字符串函数
#np.char.add()
import numpy as np
print(np.char.add(["hello"],["xyz"]))#最简单的首尾连接
print(np.char.add(["hello","hi"],["abc","xyz"]))#对应位置上的元素首尾连接
#np.char.multiply(),起到重复的作用
print(np.char.multiply("runoob",3))
print(np.char.multiply("*",10))
#np.char.center(str,width,fillchar)起到一个调整格式的作用
print(np.char.center("hello",20,fillchar = "*"))
#np.char.capitalize(),字符串首字母大写
print(np.char.capitalize("hello"))
print(np.char.center(np.char.capitalize("hello"),20,fillchar = "*"))
#np.char.title(),将每个单词词首字母大写
print(np.char.title("i love computer"))
print(np.char.center(np.char.title("i love computer"),30,fillchar = "*"))
#np.char.lower()/np.char.upper()
#np.char.split()默认分隔符为空格
print(np.char.split("i like python"))#默认空格
print(np.char.split("i,like,python",sep = ","))#指定为逗号
#np.char.splitlines()明确规定以换行符分割
print(np.char.splitlines("i like\nbobo"))
#np.char.strip()只能用于移除开头或结尾处的特定字符
print(np.char.strip("ai like running","a"))
print(np.char.strip("i like runninga","a"))
#np.char.join(),使用指定的符号来连接元素
print(np.char.join(":","python"))
print(np.char.join("-",['I',"like",'running']))
print(np.char.join(["-","#"],["like",'running']))#对应连接
#np.char.replace(arr,old,new)
print(np.char.replace("i like python","python","JAVA"))
#######################################数学函数
#np.floor()向下取整
#np.ceil()向上取整
#######################################算数函数
'''
add()
subtract()
multiply()
divide()
'''
a = np.arange(9,dtype=np.float).reshape(3,3)
print(a)
b = np.array([10,11,12])
c1 = np.add(a,b)
c2 = np.subtract(a,b)
c3 = np.multiply(a,b)
c4 = np.divide(a,b)
print(a,"\n")
print(c1,"\n")
print(c2,"\n")
print(c3,"\n")
print(c4,"\n")
'''
np.reciprocal()返回元素倒数
np.power()
np.mod()求余数
'''
a= np.array([0.25,1.33,2,100])
print(np.reciprocal(a))

b = np.array([10,100,1000])
c = np.array([3,2,1])
print(np.power(b,c))
##############################统计函数
'''
np.amin():用于多维数组求最值，可沿轴和不沿轴
np.amax()
np.ptp():计算一组数据极差,可以指定沿着哪个轴
np.percentile(arr,q,axis):求百分位数
np.median():按照轴计算中位数
np.mean():按照轴计算简单算数平均数
np.average():计算加权算数平均数
np.std():标准差
np.var():方差
'''
a = np.array([[3,7,5],[8,4,3],[2,4,9]])
print("数组a:","\n",a)
print("沿着1轴求最小值","\n")
print(np.amin(a,1))
print("沿着0轴求最小值","\n")
print(np.amin(a,0))
print("沿着1轴求最大值","\n")
print(np.amax(a,1))
print("沿着0轴求最大值","\n")
print(np.amax(a,0))
print("若没有指定轴，获取最大/小值")
print(np.amax(a))
print(np.amin(a))

a = np.array([[3,7,5],[8,4,3],[2,4,9]])
print("原数组:","\n",a)
print("不指定轴，求全部数据的极差")
print(np.ptp(a))
print("沿着1轴计算极差")
print(np.ptp(a,axis=1))
print("沿着0轴计算极差")
print(np.ptp(a,axis = 0))

a = np.array( np.random.normal(0,1,24)).reshape(4,6)
print("求全部数据的25%，50%，75%分位数：")
a_25 = np.percentile(a,25)
a_50 = np.percentile(a,50)
a_75 = np.percentile(a,75)
print("25%分位数：",a_25,"\n")
print("50%分位数：",a_50,"\n")
print("75%分位数：",a_75,"\n")
print("从轴0，列上求50%分位数")
print(np.percentile(a,50,axis=0))
print("从轴1，行上求50%分位数")
print(np.percentile(a,50,axis=1))

b = np.array(np.random.normal(1,1,24)).reshape(4,6)
print("求全部数据的中位数：")
print(np.median(b),"\n")
print("沿着0轴，列方向求中位数")
print(np.median(b,axis=0))
print("沿着1轴，行方向求中位数")
print(np.median(b,axis = 1))

a = np.array([1,2,3,4,5])
weight = np.array([4,3,2,1,1])
b = np.average(a,weights = weight)
print(b)

#######################排序、按照条件选择函数
############排序########
'''
quicksort
mergesort
heapsort
'''
#np.sort(arr,axis,kind,order)默认kind 为quicksort
a = np.array([[3,7],[9,1]])
print("没有指定轴的全排序")
print(np.sort(a))
print("按照0轴即列排序")
print(np.sort(a,axis = 0))
#有多种数据类型的时候可用oder规定按照什么数据排序
dt = np.dtype([("name","S10"),("age","int")])
a = np.array([("raju",21),("anil",25),("amar",27),("ravi",17)],dtype = dt)
print("按照name排序")
print(np.sort(a,order = "name"))

#np.argsort(),返回数值按从小到大排序后的索引值
x = np.array([1,5,2,9,3,0,7])
index = np.argsort(x)#得到索引值
y1 = x[index]#得到从小到大排序的数列

#np.lexsort(),同时对几个序列进行排序得到索引值
a = ("raju","anil","ravi","amar")
b = ("f.y.","s.y.","s.y.","f.y.")
index = np.lexsort((a,b))#自动优先按照最后一列来排序
for i in index:
	print(a[i]+","+b[i])
	print(np.char.multiply("*",10))

'''
np.msort():按照第一个轴排序
np.sort_complex():先实部后虚部排序
np.partition():指定数据对数组分割
argpartition():指定算法和轴对数据分割
np.argmax():指定轴返回最大值的索引
np.argmin():
带arg的返回的基本是索引
np.nonzero():返回非零元素索引
'''
a = np.array([[0,1,2],[0,4,6],[3,0,9]])
index = np.nonzero(a)
print("非零元素")
b = a[index]
print("零元素")
b = a[a==0]

'''
np.where():获得条件索引
np.extract():可以用于定义更加复杂的一些条件,直接得到值
'''
x = np.arange(9).reshape(3,3)
index = np.where(x>3)
print(x[index])
print("\n")
print(x[x>3])

condition  = np.mod(x,2)==0
y = np.extract(condition,x)
print(y,"\n")
print(x[np.mod(x,2)==0])
